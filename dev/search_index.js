var documenterSearchIndex = {"docs":
[{"location":"dataset/#Folder-Structure","page":"Dataset Format","title":"Folder Structure","text":"","category":"section"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"The dataset generated by HEDGeOPF consists mainly in CSV files organized in nested subfolders with a well-defined level hierarchy that is explained hereafter. A complete, exemplary dataset with 100 AC-OPF samples is available at this folder. This is generated with two remote workers for the pglib_opf_case5_pjm test case.","category":"page"},{"location":"dataset/#Main-Level","page":"Dataset Format","title":"Main Level","text":"","category":"section"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"At the upper level there are as many folders as the number of power systems configurations for which AC-OPF instances are generated.","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"dataset/\n├── C0/\n│   ├── bus/\n│   ├── .../\n│   └── ...\n├── C1/\n│   └── .../\n├── ...\n├── map.csv\n├── polytope.csv\n└── rng_state.bin","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"note: Note\nCurrently, only the original power system topology C0 specified by the .m file is considered and there is no routine to generate modified topologies.","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"At this level, three files are available:","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"The rng_state.bin file contains the final RNG state of the simulation. The user can employ it to generate additional AC-OPF instances for the same dataset.\nThe polytope.csv file contains the matrix A and vector b, as stacked horizontally, that defined the convex polytope Ax <= b for load sampling.\nThe map.csv file maps the unique identifier (and other global OPF information) of each instance to its location within the nested folder structure. It is organized into labelled columns as shown hereafter.","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"Key Type Unit Description\nuid Int64 – Unique identifier of the AC-OPF instance\nconfig Int64 – Index of the power system configuration used to generate the instance\nworker Int64 – Index of distributed worker that generated the instance\ncase Int64 – Index of the case among those generated by the specified worker\ntermination_status Int64 – Binary termination status\npd_tot Float64 [p.u.] Total load active power of the instance\nobjective Float64 [€] Objective value of the AC-OPF solution\nsolve_time Float64 [s] Time taken by the solver to solve the instance","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"note: Note\nThe UID can also be used to check results reproducibility. Indeed, the dataset generation is deterministic up to instance ordering in the dataset, since samples are assigned to workers dynamically with distributed computing. UID is assigned by sorting AC-OPF instances based on total load active power pd_tot and objective value objective. Therefore, by ordering instances based on UID it is possible to check if different runs for the same configuration YAML file are identical.","category":"page"},{"location":"dataset/#Topology-Level","page":"Dataset Format","title":"Topology Level","text":"","category":"section"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"Each topology folder has the same internal structure and consists of a set of subfolders that mimic the organization of PowerModels' Results Data Dictionary, specifically the \"solution\" one. This means that for each existing PowerModels component (e.g., bus. branch, etc.), there is a corresponding folder containing CSV files for different variable types. Since AC-OPF instances are generated with distributed computing, each remote worker worker processes dynamically a fraction of the total number of cases. These are saved in dedicated CSV files (one per variable) labelled as variable-worker.csv. Consequently, a single AC-OPF instance is split and saved at the same row of multiple CSV files, all generated by the same worker.","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"C0/\n├── bus/\n│   ├── va-1.csv\n│   ├── va-2.csv\n│   ├── ...\n│   ├── vm-1.csv\n│   ├── vm-2.csv\n│   └── ...\n├── branch/\n│   ├── pf-1.csv\n│   ├── pf-2.csv\n│   └── ...\n├── gen/\n│   └── ...\n├── load/\n│   └── ...\n├── .../\n├── graph.xlsx\n├── info-1.csv\n├── info-2.csv\n└── ...","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"Each CSV file has:","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"as many columns as the number of components for the given variables\nas many rows as the number of feasible AC-OPF instance generated by the given worker plus a row for the component indices","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"This is exemplified in the table below for the voltage magnitude variable vm at the buses of the pglib_opf_case5_pjm.m test case.","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"1 2 3 4 5\n1.060 1.031 1.033 0.997 1.001\n1.044 1.018 1.025 0.972 0.975\n1.058 1.029 1.048 0.994 0.999\n... ... ... ... ...","category":"page"},{"location":"dataset/","page":"Dataset Format","title":"Dataset Format","text":"The graph.xlsx file contains, in multiple sheets representing the different power system component types, all the static, input features defined in PowerModels' Network Data Dictionary. However, differently from PowerModels' dictionary, information is reported in the XLSX file only for those components (e.g., generators) that are active under the given topology.","category":"page"},{"location":"quickstartguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickstartguide/","page":"Getting Started","title":"Getting Started","text":"Once the installation of HEDGeOPF is successfully completed, it is possible to generate an AC-OPF dataset of N samples for a given power system test case by following few steps. Start by placing at a path of your choosing:","category":"page"},{"location":"quickstartguide/","page":"Getting Started","title":"Getting Started","text":"the network data file in .m format (e.g., pglib_opf_case5_pjm.m)\nthe configuration YAML file settings.yaml that controls the simulation.","category":"page"},{"location":"quickstartguide/","page":"Getting Started","title":"Getting Started","text":"Open the configuration YAML file and set entries grid and num_samples under section CASE to the grid file name as string (e.g., \"pglib_opf_case5_pjm.m\") and the desired number of AC-OPF samples N (e.g., 10000), respectively. If needed, change entry cpu_ratio under section PARALLEL to the desired percentage of CPU threads relative to Sys.CPU_THREADS that are used for distributed computing.","category":"page"},{"location":"quickstartguide/","page":"Getting Started","title":"Getting Started","text":"CASE:\n    grid : \"pglib_opf_case5_pjm.m\"\n    ...\n    num_samples : 10000\n\n...\n\nPARALLEL:\n    cpu_ratio : 50.0","category":"page"},{"location":"quickstartguide/","page":"Getting Started","title":"Getting Started","text":"Save and close the YAML file. Then, in Julia run","category":"page"},{"location":"quickstartguide/","page":"Getting Started","title":"Getting Started","text":"using HEDGeOPF\nimport HiGHS, Ipopt\n\npath = \"/path/of/your/choosing\"\ngenerate_dataset(cd(path); filename = \"settings.yaml\")","category":"page"},{"location":"configuration/#Configuration-File","page":"Simulation Configuration","title":"Configuration File","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"The generation of an AC-OPF dataset is completely controlled and configured through an input YAML file of options settings.yaml. As exemplified below, these are organized into sections and are explained in detail hereafter.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"CASE:\n    name : \"test\"\n    grid : \"pglib_opf_case5_pjm.m\"\n    ...\n\nSAMPLING:\n    delta_pd : 100.0\n    ...","category":"page"},{"location":"configuration/#CASE-options","page":"Simulation Configuration","title":"CASE options","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"This section defines global parameters that control how the AC-OPF dataset is generated.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Key Type Description\nname String Name of the folder where the dataset is saved\ngrid String Full name of the power system grid (MATPOWER format .m file)\nuid Bool Whether to generate a unique identifier for each AC-OPF instance\nappend Bool Whether to append new results to an existing dataset\nbaseseed Int64 Random number generator seed to control reproducibility\nnum_samples Int64 Total number of AC-OPF samples to generate\nnum_batches Int64 Number of batches in which the total samples are processed\nnum_items Int64 Number of load samples generated for a single total load active power level","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Few options deserve a more in-depth characterization.","category":"page"},{"location":"configuration/#Behaviour-of-append","page":"Simulation Configuration","title":"Behaviour of append","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"If append is set to false and a dataset already exists under name, an error is raised to avoid overwriting it. If, instead, this option is true, new results are appended to the existing files. In this case, sampling resumes from the previously saved Random Number Generator (RNG) state, stored as rng_state.bin in the results folder. This file is automatically saved at the end of the dataset generation.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"warning: Warning\nIf append is true and no RNG state file is available, remember to change the RNG seed baseseed to avoid regenerating the same dataset.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Appending to an existing dataset with uid set to true implies re-generating/overwriting the unique identifier mapping that is used for splitting. To avoid this behaviour (e.g., when generating a held-out dataset for NN testing), switch this option to false.","category":"page"},{"location":"configuration/#Behaviour-of-num_batches","page":"Simulation Configuration","title":"Behaviour of num_batches","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"By design, AC-OPF instances are obtained by first sampling all input load profiles, then solving the OPF problem for each. Clearly, this can significantly increase memory consumption when generating large datasets. Processing the total number of samples num_samples in batches mitigates this issue.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"warning: Warning\nHowever, the batch size should not be smaller than 2000-2500 samples. This is due to the fact that AC-OPF convergence is monitored for each total load active power sample. After processing the first batch, the region of sampling in total load active power is trimmed to exclude areas at the extrema of the distribution in which the AC-OPF never converges. If the number of batch samples is too small to sample the total active power region truly uniformly, regions that are feasible for the AC-OPF may be wrongly trimmed.","category":"page"},{"location":"configuration/#Behaviour-of-num_items","page":"Simulation Configuration","title":"Behaviour of num_items","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"As detailed in the reference publication, load sampling is performed uniformly in terms of total active power. Specifically, each sample is generated by slicing the convex polytope around a certain value of total load active power and by sampling uniformly within this slice. The option num_items controls how many load samples are generated from a single polytope slice.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"note: Note\nSampling from a polytope slice requires computing first its Chebyshev center. Setting num_items to 1 means determining as many Chebyshev centers as num_samples. This can be computationally demanding for large-scale power systems and/or for large datasets. Increasing num_items implies reducing the number of Chebyshev center computations.","category":"page"},{"location":"configuration/#SAMPLING-options","page":"Simulation Configuration","title":"SAMPLING options","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"These control how the input sampling space is created. Currently, this consists solely in a convex polytope defined in terms of load active and reactive power variables.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Key Type Unit Description\ndelta_pd Float64 [%] Percentage variation in load active power around the nominal values\ndelta_qd Float64 [%] Percentage variation in load reactive power around the nominal values\ndelta_pf Float64 [1] Maximum reduction in power factor w.r.t. the nominal absolute value\nmax_pf Float64 [1] Maximum allowable load power factor\nmin_pf Float64 [1] Minimum allowable load power factor","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"note: Note\nThe value delta_pd cannot exceed 100% since the active power of a load cannot be unrestricted in sign to preserve the sign relation between active and reactive power. To create a load with negative (positive) active power at a bus that already has a positive (negative) one, add a new load to the power system dictionary or .m file with negative (positive) nominal active power.","category":"page"},{"location":"configuration/#PARALLEL-options","page":"Simulation Configuration","title":"PARALLEL options","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"The PARALLEL section controls distributed computing settings to be applied throughout the simulation.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Key Type Unit Description\ncpu_ratio Float64 [%] Percentage of CPU threads to use w.r.t. Sys.CPU_THREADS count","category":"page"},{"location":"configuration/#MODEL-options","page":"Simulation Configuration","title":"MODEL options","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"These options are related to the modified PowerModels OPF model with slack variables for active and reactive load power.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Key Type Unit Description\nduals Bool – Whether to record dual values for every primal AC-OPF variable\nvoll Float64 [€/MWh] Value Of Lost Load","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"When duals is set to true, by design HEDGeOPF automatically retrieves the dual values, if available, of every JuMP.VariableRef defined in the model and, yet, does not look for any JuMP.ConstraintRef object. This choice stems from the fact that PowerModels mainly employs anonymous, non-containerized JuMP constraints in model definition, making it difficult to retrieve their (dual) values when inspecting results.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"warning: Warning\nTo record the dual value of branch apparent power, the OPF model is modified when duals is set to true by adding variables for the square of the branch apparent power at the from and to buses. When accessing and using the primal values for branch apparent power in the dataset results, the user should remember that they are squared.","category":"page"},{"location":"configuration/#PATH-options","page":"Simulation Configuration","title":"PATH options","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"These define input and output file paths relative to the one of the input configuration YAML file basepath. Overall, the absolute path of the grid file is basepath/PATH.input/. Similarly, the one of the dataset is composed as basepath/PATH.output/CASE.grid/CASE.name/.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Key Type Description\ninput String Relative path to the folder containing the grid file\noutput String Relative path to the folder where the AC-OPF dataset is saved","category":"page"},{"location":"configuration/#SOLVER-options","page":"Simulation Configuration","title":"SOLVER options","text":"","category":"section"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"The SOLVER section specifies the LP and NLP solvers employed in HEDGeOPF.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"Key Type Description\nlp String Julia package name of linear programming solver\nnlp String Julia package name of nonlinear programming solver\nlp_options Pair Key-value pairs of options for the linear programming solver\nnlp_options Pair Key-value pairs of options for the nonlinear programming solver","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"The following example shows how lp_options and nlp_options can be specified in the YAML file.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"SOLVER:\n    lp          : \"HiGHS\"\n    lp_options  :\n        solver            : \"ipm\"  \n    nlp         : \"Ipopt\"\n    nlp_options :\n        max_cpu_time      : 1000.0\n        mumps_mem_percent : 10\n        print_level       : 0","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"HEDGeOPF is designed to be independent from the specific choice of LP and NLP solvers (as long as they support the type of variables and constraints used in the optimization models). The user should be able to control this simply by installing the relevant Julia packages and change the SOLVER section accordingly. The options of a specific solver, such as those of HiGHS and Ipopt, are typically available at the solver main documentation.","category":"page"},{"location":"configuration/","page":"Simulation Configuration","title":"Simulation Configuration","text":"note: Note\nCurrently only HiGHS and Ipopt solvers have been tested with HEDGeOPF, with Ipopt being equipped with the default sequential MUMPS linear solver.","category":"page"},{"location":"#HEDGeOPF.jl-Documentation","page":"Home","title":"HEDGeOPF.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HEDGeOPF.jl is a Julia package to generate datasets of AC Optimal Power Flow (AC-OPF) instances for standardized training and testing of Neural Networks (NNs) that learn to approximate this problem. It implements a methodology that delivers high-quality datasets without compromising on efficiency and scalability. Please refer to our publication for details on the methodology, altough this has further evolved in the code with respect to the paper. An extended version will be made available soon.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package HEDGeOPF relies on the R package volesti for polytope sampling via RCall.jl. Therefore, these external dependencies must be installed for HEDGeOPF to fully work. Currently, this can be done manually through the following steps:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Perform a system-wide installation of R from CRAN. Is is recommended to install a R ≥ 4.4 release. In particular, the latest version of volesti is build with R 4.4.3.\nOpen an R session and run the following command to install the latest release of volesti:","category":"page"},{"location":"","page":"Home","title":"Home","text":"install.packages(\"volesti\", repos = \"https://cloud.r-project.org\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is now possible to install HEDGeOPF using the Julia package manager.","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/mttb91/HEDGeOPF.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"As explained here, in order for RCall to locate the R installation, run","category":"page"},{"location":"","page":"Home","title":"Home","text":"] build RCall","category":"page"},{"location":"","page":"Home","title":"Home","text":"Running HEDGeOPF requires two solvers: one for Linear Programming (LP) problems and the other for nonlinear (NLP) ones. The open-source solvers HiGHS and Ipopt are recommended for the first and second problem class, respectively, and can be installed via the package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add HiGHS, Ipopt","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"] test HEDGeOPF","category":"page"},{"location":"","page":"Home","title":"Home","text":"HEDGeOPF's tests verify, among other things, if RCall connection to R is established correctly and if the R package volesti is installed and fully working.","category":"page"}]
}
